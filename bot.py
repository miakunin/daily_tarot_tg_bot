import logging
import random
import os
import json
from datetime import datetime, date
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from tarot_cards import tarot_deck, fortune_templates, get_total_cards, get_cards_by_type

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API
try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False
    print("‚ö†Ô∏è Google Generative AI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç.")

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
ADMIN_ID = os.getenv('ADMIN_ID')  # –í–∞—à Telegram ID –¥–ª—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
if GEMINI_AVAILABLE and GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    USE_AI_INTERPRETATIONS = True
    print("ü§ñ Google Gemini API –ø–æ–¥–∫–ª—é—á—ë–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è")
else:
    USE_AI_INTERPRETATIONS = False
    if GEMINI_AVAILABLE:
        print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = 'users_data.json'

async def generate_ai_interpretation(card_name, user_name=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ —Å –ø–æ–º–æ—â—å—é Google Gemini"""
    if not USE_AI_INTERPRETATIONS:
        return None
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        user_part = f" –¥–ª—è {user_name}" if user_name else ""
        
        prompt = f"""–¢—ã –º–∞—Å—Ç–µ—Ä –¢–∞—Ä–æ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã "{card_name}"{user_part}.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–æ–Ω: –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, –º—É–¥—Ä—ã–π, –Ω–æ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π
- –î–ª–∏–Ω–∞: 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –í–∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
- –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∞—Å–∏–≤—ã–µ —ç–º–æ–¥–∂–∏ (üåü‚ú®üîÆüí´üåô)
- –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ò–∑–±–µ–≥–∞–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –¥–∞–∂–µ –¥–ª—è "—Å–ª–æ–∂–Ω—ã—Ö" –∫–∞—Ä—Ç

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: "üåü [–ö—Ä–∞—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã]. [–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è]. ‚ú® [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç]."

–ö–∞—Ä—Ç–∞: {card_name}

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        models_to_try = [
            'gemini-2.0-flash',      # –ù–æ–≤–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
            'gemini-1.5-pro',       # –ù–æ–≤–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å  
            'gemini-pro',           # –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
            'models/gemini-1.5-flash',  # –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º models/
            'models/gemini-1.5-pro'
        ]
        
        for model_name in models_to_try:
            try:
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
                model = genai.GenerativeModel(model_name)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                generation_config = genai.types.GenerationConfig(
                    temperature=0.8,
                    max_output_tokens=200,
                    top_p=0.9,
                    top_k=40
                )
                
                # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
                response = model.generate_content(
                    prompt,
                    generation_config=generation_config
                )
                
                if response.text:
                    interpretation = response.text.strip()
                    logger.info(f"Gemini AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–∞—Ä—Ç—ã: {card_name} (–º–æ–¥–µ–ª—å: {model_name})")
                    return interpretation
                else:
                    logger.warning(f"Gemini –º–æ–¥–µ–ª—å {model_name} –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    continue
                    
            except Exception as model_error:
                logger.warning(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {model_error}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        logger.error("–í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
        
    except Exception as e:
        error_msg = str(e)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ Gemini
        if "quota" in error_msg.lower() or "limit" in error_msg.lower():
            logger.warning("Gemini API: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è.")
        elif "api_key" in error_msg.lower() or "authentication" in error_msg.lower():
            logger.error("Gemini API: –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º.")
        elif "safety" in error_msg.lower():
            logger.warning("Gemini API: –û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        elif "blocked" in error_msg.lower():
            logger.warning("Gemini API: –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ.")
        elif "404" in error_msg or "not found" in error_msg.lower():
            logger.error("Gemini API: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install --upgrade google-generativeai")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è fallback –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
        return None

def generate_fortune(card, user_name=None):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º (—Å—Ç–∞—Ç–∏—á–Ω–æ–µ)"""
    template = random.choice(fortune_templates)
    return template.format(name=card['name'], meaning=card['meaning'])

async def generate_fortune_with_ai(card, user_name=None):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è"""
    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    ai_interpretation = await generate_ai_interpretation(card['name'], user_name)
    
    if ai_interpretation:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        ai_templates = [
            "üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è - **{name}**\n\n{ai_meaning}\n\nüí´ –ü—É—Å—Ç—å —ç—Ç–æ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è!",
            "üåü –í—Å–µ–ª–µ–Ω–Ω–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç **{name}** –¥–ª—è –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è.\n\n{ai_meaning}\n\nüôè –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –º—É–¥—Ä–æ—Å—Ç–∏ –∫–∞—Ä—Ç.",
            "‚ú® –ö–∞—Ä—Ç—ã –∑–∞–≥–æ–≤–æ—Ä–∏–ª–∏! **{name}** –Ω–µ—Å—ë—Ç –æ—Å–æ–±–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ.\n\n{ai_meaning}\n\nüåô –ü—Ä–∏–º–∏—Ç–µ —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º —Å–µ—Ä–¥—Ü–µ–º."
        ]
        template = random.choice(ai_templates)
        return template.format(name=card['name'], ai_meaning=ai_interpretation)
    else:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ user_name, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç)
        return generate_fortune(card)

# –ö–æ–ª–æ–¥–∞ –¢–∞—Ä–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ tarot_cards.py

def draw_random_card():
    """–í—ã—Ç—è–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã"""
    return random.choice(tarot_deck)

def generate_fortune(card):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º"""
    template = random.choice(fortune_templates)
    return template.format(name=card['name'], meaning=card['meaning'])

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def can_get_fortune(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
    user_data = load_user_data()
    user_id_str = str(user_id)
    
    if user_id_str not in user_data:
        return True
    
    last_fortune_date = user_data[user_id_str].get('last_fortune_date')
    if not last_fortune_date:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à—ë–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å
    today = date.today().isoformat()
    return last_fortune_date != today

def update_user_fortune_date(user_id):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    user_id_str = str(user_id)
    
    if user_id_str not in user_data:
        user_data[user_id_str] = {}
    
    user_data[user_id_str]['last_fortune_date'] = date.today().isoformat()
    user_data[user_id_str]['total_fortunes'] = user_data[user_id_str].get('total_fortunes', 0) + 1
    
    save_user_data(user_data)

def get_user_stats(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    user_id_str = str(user_id)
    
    if user_id_str not in user_data:
        return {'total_fortunes': 0, 'last_fortune_date': None}
    
    return user_data[user_id_str]
    """–í—ã—Ç—è–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã"""
    return random.choice(tarot_deck)

def generate_fortune(card):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º"""
    fortunes = [
        f"üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è - **{card['name']}**\n\n{card['meaning']}\n\n‚ú® –ü—É—Å—Ç—å —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –æ—Å–≤–µ—Ç–∏—Ç –≤–∞—à –ø—É—Ç—å —Å–µ–≥–æ–¥–Ω—è!",
        f"üåü –ö–∞—Ä—Ç—ã –∑–∞–≥–æ–≤–æ—Ä–∏–ª–∏! **{card['name']}** –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–ª—è –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è.\n\n{card['meaning']}\n\nüôè –ü—Ä–∏–º–∏—Ç–µ –º—É–¥—Ä–æ—Å—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.",
        f"üÉè –í–∞—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¢–∞—Ä–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç **{card['name']}**\n\n{card['meaning']}\n\nüí´ –ü—É—Å—Ç—å —ç—Ç–æ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞—à –¥–µ–Ω—å —Å —Ü–µ–ª—å—é.",
        f"‚ú® –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç **{card['name']}** –≤–∞–º —Å–µ–≥–æ–¥–Ω—è.\n\n{card['meaning']}\n\nüåô –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤–∞–º–∏."
    ]
    
    return random.choice(fortunes)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    card_stats = get_cards_by_type()
    ai_status = "ü§ñ Gemini AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è" if USE_AI_INTERPRETATIONS else "üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ"
    
    welcome_message = f"""
üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¢–∞—Ä–æ, {user_name}! üîÆ

‚ú® –Ø –¥–∞—é —Ç–æ–ª—å–∫–æ –û–î–ù–û –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –¥–µ–Ω—å - –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä –¢–∞—Ä–æ.

üé¥ **–ú–æ—è –∫–æ–ª–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {card_stats['total']} –∫–∞—Ä—Ç:**
üîÆ {card_stats['major_arcana']} –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤
‚öîÔ∏è {card_stats['minor_arcana']} –ú–ª–∞–¥—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤ (–≤—Å–µ 4 –º–∞—Å—Ç–∏)

üß† **–†–µ–∂–∏–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π:** {ai_status} üí∞ –ë–ï–°–ü–õ–ê–¢–ù–û!

–ö–æ–º–∞–Ω–¥—ã:
/fortune - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ—ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
/card - –¢–æ –∂–µ, —á—Ç–æ –∏ /fortune
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/deck - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ
/ai - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üåü –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —É–≥–æ—Ç–æ–≤–∏–ª–∏ –≤–∞–º –∫–∞—Ä—Ç—ã —Å–µ–≥–æ–¥–Ω—è? 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fortune —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ!

üí´ –ü–æ–º–Ω–∏—Ç–µ: –∫–∞—Ä—Ç—ã –¥–∞—é—Ç –º—É–¥—Ä–æ—Å—Ç—å –ª–∏—à—å —Ä–∞–∑ –≤ –¥–µ–Ω—å.
    """
    
    await update.message.reply_text(welcome_message)

async def check_available_models():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini"""
    if not GEMINI_AVAILABLE or not GEMINI_API_KEY:
        return []
    
    try:
        models = genai.list_models()
        available_models = []
        
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
        
        return available_models
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

async def ai_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - —Å—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º—ã"""
    if not GEMINI_AVAILABLE:
        status_message = """
‚ùå **–°—Ç–∞—Ç—É—Å AI: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

üì¶ Google Generative AI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: `pip install --upgrade google-generativeai`
üîÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
        """
    elif not GEMINI_API_KEY:
        status_message = """
‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å AI: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**

üîë GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ
üåê –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://makersuite.google.com/app/apikey
üîÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
        """
    else:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_result = await generate_ai_interpretation("–î—É—Ä–∞–∫", "—Ç–µ—Å—Ç")
        
        if test_result:
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            available_models = await check_available_models()
            models_text = "\n".join([f"  ‚Ä¢ {model}" for model in available_models[:5]])  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
            if len(available_models) > 5:
                models_text += f"\n  ‚Ä¢ ... –∏ –µ—â—ë {len(available_models) - 5} –º–æ–¥–µ–ª–µ–π"
            
            status_message = f"""
‚úÖ **–°—Ç–∞—Ç—É—Å AI: –†–∞–±–æ—Ç–∞–µ—Ç**

ü§ñ Google Gemini API –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç
üîÆ AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: {"–≤–∫–ª—é—á–µ–Ω—ã" if USE_AI_INTERPRETATIONS else "–≤—ã–∫–ª—é—á–µ–Ω—ã"}
üéØ –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: Gemini-1.5-Flash (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
‚ú® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã
üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç: 60 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
{models_text if models_text else "  ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞..."}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º
            """
        else:
            status_message = """
‚ùå **–°—Ç–∞—Ç—É—Å AI: –û—à–∏–±–∫–∞**

üîë API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:
‚Ä¢ –ú–æ–¥–µ–ª—å gemini-pro –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install --upgrade google-generativeai
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (60/–º–∏–Ω)
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é

üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –Ω–∞: https://makersuite.google.com/
            """
    
    await update.message.reply_text(status_message, parse_mode='Markdown')

async def ai_toggle_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π"""
    global USE_AI_INTERPRETATIONS
    
    if not GEMINI_AVAILABLE or not GEMINI_API_KEY:
        await update.message.reply_text(
            "‚ùå AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
            "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-generativeai"
        )
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º
    USE_AI_INTERPRETATIONS = not USE_AI_INTERPRETATIONS
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã ü§ñ" if USE_AI_INTERPRETATIONS else "–≤—ã–∫–ª—é—á–µ–Ω—ã üìö"
    mode = "–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Gemini —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è" if USE_AI_INTERPRETATIONS else "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç"
    
    toggle_message = f"""
üîÑ **–†–µ–∂–∏–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π –∏–∑–º–µ–Ω—ë–Ω!**

‚ú® AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: {status}
üéØ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode}

ü§ñ **Gemini —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è:** –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (–ë–ï–°–ü–õ–ê–¢–ù–û!)
üìö **–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ:** –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç –¢–∞—Ä–æ

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º.
    """
    
    await update.message.reply_text(toggle_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    ai_status = "ü§ñ –≤–∫–ª—é—á–µ–Ω—ã" if USE_AI_INTERPRETATIONS else "üìö –≤—ã–∫–ª—é—á–µ–Ω—ã"
    ai_availability = "" if (GEMINI_AVAILABLE and GEMINI_API_KEY) else "\n‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ—Ç Gemini API –∫–ª—é—á–∞)"
    
    help_message = f"""
üÉè **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¢–∞—Ä–æ:**

/fortune - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¢–∞—Ä–æ
/card - –¢–æ –∂–µ, —á—Ç–æ –∏ /fortune
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É  
/deck - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ –∫–∞—Ä—Ç
/ai - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π (AI/–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ)
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º—ã
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚ú® **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**
üåô –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –¥–µ–Ω—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
üîÆ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –∫–∞—Ä—Ç–∞–º
üé¥ –ü–æ–ª–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∏–∑ 78 –∫–∞—Ä—Ç –¢–∞—Ä–æ
ü§ñ Gemini AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: {ai_status} (–ë–ï–°–ü–õ–ê–¢–ù–û!){ai_availability}

*–ü–æ–º–Ω–∏—Ç–µ: —á—Ç–µ–Ω–∏—è –¢–∞—Ä–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞.*

üí´ –ü—É—Å—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –≤–∞—à –ø—É—Ç—å!
    """
    
    await update.message.reply_text(help_message, parse_mode='Markdown')

async def deck_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deck - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ"""
    card_stats = get_cards_by_type()
    
    deck_message = f"""
üÉè **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ –¢–∞—Ä–æ:**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç:**
üîÆ –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã: {card_stats['major_arcana']} –∫–∞—Ä—Ç
‚öîÔ∏è –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: {card_stats['minor_arcana']} –∫–∞—Ä—Ç
üé¥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {card_stats['total']} –∫–∞—Ä—Ç

üåü **–ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã –≤–∫–ª—é—á–∞—é—Ç –≤—Å–µ —á–µ—Ç—ã—Ä–µ –º–∞—Å—Ç–∏:**
üíß –ö—É–±–∫–∏ (–í–æ–¥–∞) - —ç–º–æ—Ü–∏–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å
üåç –ü–µ–Ω—Ç–∞–∫–ª–∏ (–ó–µ–º–ª—è) - –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –º–∏—Ä, —Ñ–∏–Ω–∞–Ω—Å—ã, –∫–∞—Ä—å–µ—Ä–∞  
üí® –ú–µ—á–∏ (–í–æ–∑–¥—É—Ö) - –º—ã—Å–ª–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –æ–±—â–µ–Ω–∏–µ
üî• –ñ–µ–∑–ª—ã (–û–≥–æ–Ω—å) - –¥–µ–π—Å—Ç–≤–∏–µ, —ç–Ω–µ—Ä–≥–∏—è, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ

‚ú® –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–∑ –ø–æ–ª–Ω–æ–π –∫–æ–ª–æ–¥—ã!
    """
    
    await update.message.reply_text(deck_message, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    stats = get_user_stats(user_id)
    
    if stats.get('total_fortunes', 0) == 0:
        stats_message = f"""
üìä {user_name}, –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞...

üîÆ –í—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –∫–∞—Ä—Ç.
‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fortune —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ!

üí´ –ü—É—Å—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –¢–∞—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è!
        """
    else:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
        can_get_today = can_get_fortune(user_id)
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if can_get_today else "‚è≥ –ñ–¥–∏—Ç–µ –¥–æ –∑–∞–≤—Ç—Ä–∞"
        
        stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_name}:**

üîÆ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats.get('total_fortunes', 0)}
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {stats.get('last_fortune_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üåü –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {status}

‚ú® –ö–∞–∂–¥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–∞—Ä—Ç–∞–º –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –º—É–¥—Ä–æ—Å—Ç–∏!
        """
    
    await update.message.reply_text(stats_message, parse_mode='Markdown')

async def fortune(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /fortune –∏ /card"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if not can_get_fortune(user_id):
        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = get_user_stats(user_id)
        
        waiting_message = f"""
üåô {user_name}, –∫–∞—Ä—Ç—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ –≤–∞–º —Å–≤–æ–∏ —Ç–∞–π–Ω—ã —Å–µ–≥–æ–¥–Ω—è...

‚ú® –í—Å–µ–ª–µ–Ω–Ω–∞—è –¥–∞—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –¥–µ–Ω—å. 
üïê –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –≥–æ—Ç–æ–≤—è—Ç –≤–∞–º –∑–≤—ë–∑–¥—ã.

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üîÆ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats.get('total_fortunes', 0)}
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {stats.get('last_fortune_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üí´ –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞—Å –¥–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞!
        """
        
        await update.message.reply_text(waiting_message)
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    await update.message.reply_chat_action('typing')
    
    # –í—ã—Ç—è–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
    drawn_card = draw_random_card()
    
    # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    update_user_fortune_date(user_id)
    
    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º (–≤–æ–∑–º–æ–∂–Ω–æ —Å AI)
    fortune_message = await generate_fortune_with_ai(drawn_card, user_name)
    
    # –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_user_stats(user_id)
    
    # –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
    source_info = "ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ" if USE_AI_INTERPRETATIONS else "üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ"
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    full_message = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üåü\n\n{fortune_message}\n\n"
    
    # –î–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if stats.get('total_fortunes', 0) == 1:
        full_message += "üéâ –≠—Ç–æ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ!\n\n"
    else:
        full_message += f"üìä –≠—Ç–æ –≤–∞—à–µ {stats.get('total_fortunes', 0)}-–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n\n"
    
    full_message += f"{source_info}\nüí´ –ü–æ–º–Ω–∏—Ç–µ: –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤—Ç—Ä–∞!"
    
    await update.message.reply_text(full_message, parse_mode='Markdown')

async def admin_reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if ADMIN_ID and str(user_id) != str(ADMIN_ID):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
        if os.path.exists(USER_DATA_FILE):
            backup_file = f"users_data_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            import shutil
            shutil.copy(USER_DATA_FILE, backup_file)
            
            # –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            os.remove(USER_DATA_FILE)
            
            reset_message = f"""
üîß **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞!**

‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: `{backup_file}`
üóëÔ∏è –ê–∫—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞
üîÑ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!
            """
        else:
            reset_message = """
üìù **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞!**

‚úÖ –§–∞–π–ª users_data.json –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
üîÑ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            """
        
        await update.message.reply_text(reset_message, parse_mode='Markdown')
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º: {user_id}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î: {e}")

async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adminstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if ADMIN_ID and str(user_id) != str(ADMIN_ID):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        user_data = load_user_data()
        total_users = len(user_data)
        total_fortunes = sum(user.get('total_fortunes', 0) for user in user_data.values())
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        today = date.today().isoformat()
        users_today = sum(1 for user in user_data.values() 
                         if user.get('last_fortune_date') == today)
        
        stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üîÆ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {total_fortunes}
üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {users_today}
ü§ñ AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: {"–≤–∫–ª—é—á–µ–Ω—ã" if USE_AI_INTERPRETATIONS else "–≤—ã–∫–ª—é—á–µ–Ω—ã"}
üé¥ –ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {get_total_cards()}

‚öôÔ∏è **–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:**
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
/adminstats - —ç—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    ai_status = "ü§ñ Gemini AI" if USE_AI_INTERPRETATIONS else "üìö –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ"
    
    message = f"""
üîÆ –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –≤–∞—à –±–æ—Ç –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¢–∞—Ä–æ.

‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fortune —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
üé¥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deck —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –∫–æ–ª–æ–¥–µ
ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π
üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI
‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥

üß† –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {ai_status} —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è (–ë–ï–°–ü–õ–ê–¢–ù–û!)
üåü –ü–æ–º–Ω–∏—Ç–µ: –∫–∞—Ä—Ç—ã –¥–∞—Ä—è—Ç –º—É–¥—Ä–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å!
    """
    
    await update.message.reply_text(message)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("fortune", fortune))
    application.add_handler(CommandHandler("card", fortune))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("deck", deck_info_command))
    application.add_handler(CommandHandler("ai", ai_toggle_command))
    application.add_handler(CommandHandler("status", ai_status_command))
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("reset", admin_reset_command))
    application.add_handler(CommandHandler("adminstats", admin_stats_command))
    
    # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    card_stats = get_cards_by_type()
    ai_mode = "Gemini AI –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" if USE_AI_INTERPRETATIONS else "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ"
    ai_available = "‚úÖ –¥–æ—Å—Ç—É–ø–Ω—ã (–ë–ï–°–ü–õ–ê–¢–ù–û)" if (GEMINI_AVAILABLE and GEMINI_API_KEY) else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    admin_status = f"‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ({ADMIN_ID})" if ADMIN_ID else "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    print("üîÆ –ë–æ—Ç –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¢–∞—Ä–æ –∑–∞–ø—É—â–µ–Ω...")
    print("‚ú® –°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞: –æ–¥–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –¥–µ–Ω—å!")
    print(f"üé¥ –ö–æ–ª–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç: {card_stats['total']} –∫–∞—Ä—Ç ({card_stats['major_arcana']} —Å—Ç–∞—Ä—à–∏—Ö + {card_stats['minor_arcana']} –º–ª–∞–¥—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤)")
    print(f"üß† –†–µ–∂–∏–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π: {ai_mode}")
    print(f"ü§ñ Gemini AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è: {ai_available}")
    print(f"üëë –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø: {admin_status}")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
    
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("üîÆ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == '__main__':
    main()
