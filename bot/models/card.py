# -*- coding: utf-8 -*-
"""
–ú–æ–¥–µ–ª—å –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
"""

from dataclasses import dataclass
from typing import Optional
from enum import Enum

class CardType(Enum):
    """–¢–∏–ø –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ"""
    MAJOR_ARCANA = "major_arcana"
    MINOR_ARCANA = "minor_arcana"

class Suit(Enum):
    """–ú–∞—Å—Ç–∏ –ú–ª–∞–¥—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤"""
    CUPS = "cups"      # –ö—É–±–∫–∏
    PENTACLES = "pentacles"  # –ü–µ–Ω—Ç–∞–∫–ª–∏  
    SWORDS = "swords"  # –ú–µ—á–∏
    WANDS = "wands"    # –ñ–µ–∑–ª—ã

@dataclass
class TarotCard:
    """–ú–æ–¥–µ–ª—å –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ"""
    
    name: str
    meaning: str
    card_type: Optional[CardType] = None
    suit: Optional[Suit] = None
    
    def __post_init__(self):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–∞—Ä—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        if self.card_type is None:
            self.card_type = self._determine_card_type()
        
        if self.suit is None and self.card_type == CardType.MINOR_ARCANA:
            self.suit = self._determine_suit()
    
    def _determine_card_type(self) -> CardType:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–∞—Ä—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        minor_arcana_keywords = ["–ö—É–±–∫–æ–≤", "–ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ú–µ—á–µ–π", "–ñ–µ–∑–ª–æ–≤"]
        
        for keyword in minor_arcana_keywords:
            if keyword in self.name:
                return CardType.MINOR_ARCANA
        
        return CardType.MAJOR_ARCANA
    
    def _determine_suit(self) -> Optional[Suit]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å—Ç—å –∫–∞—Ä—Ç—ã"""
        if "–ö—É–±–∫–æ–≤" in self.name:
            return Suit.CUPS
        elif "–ü–µ–Ω—Ç–∞–∫–ª–µ–π" in self.name:
            return Suit.PENTACLES
        elif "–ú–µ—á–µ–π" in self.name:
            return Suit.SWORDS
        elif "–ñ–µ–∑–ª–æ–≤" in self.name:
            return Suit.WANDS
        
        return None
    
    @property
    def is_major_arcana(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –°—Ç–∞—Ä—à–∏–º –ê—Ä–∫–∞–Ω–æ–º"""
        return self.card_type == CardType.MAJOR_ARCANA
    
    @property
    def is_minor_arcana(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –ú–ª–∞–¥—à–∏–º –ê—Ä–∫–∞–Ω–æ–º"""
        return self.card_type == CardType.MINOR_ARCANA
    
    def get_suit_emoji(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –º–∞—Å—Ç–∏"""
        suit_emojis = {
            Suit.CUPS: "üíß",      # –í–æ–¥–∞
            Suit.PENTACLES: "üåç", # –ó–µ–º–ª—è
            Suit.SWORDS: "üí®",    # –í–æ–∑–¥—É—Ö
            Suit.WANDS: "üî•"      # –û–≥–æ–Ω—å
        }
        
        return suit_emojis.get(self.suit, "üé¥")
    
    def get_type_emoji(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã"""
        if self.is_major_arcana:
            return "üîÆ"
        else:
            return self.get_suit_emoji()
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
        emoji = self.get_type_emoji()
        return f"{emoji} {self.name}"
