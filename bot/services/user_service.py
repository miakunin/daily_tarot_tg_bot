# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""

import logging
from typing import Optional, Dict, Any
from datetime import date

from ..config import Config
from ..models.user import User
from .database import Database

logger = logging.getLogger(__name__)

class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, config: Config):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.config = config
        self.db = Database(config.user_data_file)
        logger.info("üë• UserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_user(self, user_id: int, first_name: Optional[str] = None) -> User:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ"""
        user_data = self.db.get_user_data(user_id)
        
        if user_data:
            user = User.from_dict(user_id, user_data)
            # –û–±–Ω–æ–≤–∏—Ç—å –∏–º—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if first_name and user.first_name != first_name:
                user.first_name = first_name
                self._save_user(user)
        else:
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                user_id=user_id,
                first_name=first_name,
                created_at=date.today().isoformat()
            )
            self._save_user(user)
            logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user_id}")
        
        return user
    
    def _save_user(self, user: User):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.db.save_user_data(user.user_id, user.to_dict())
    
    def can_get_fortune(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        user = self.get_user(user_id)
        return user.can_get_fortune_today
    
    def update_fortune_date(self, user_id: int, first_name: Optional[str] = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        user = self.get_user(user_id, first_name)
        user.update_fortune_date()
        self._save_user(user)
        logger.info(f"üîÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    
    def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        return {
            'total_fortunes': user.total_fortunes,
            'last_fortune_date': user.last_fortune_date,
            'created_at': user.created_at,
            'can_get_today': user.can_get_fortune_today
        }
    
    def get_all_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        all_data = self.db.load_all_data()
        
        total_users = len(all_data)
        total_fortunes = sum(data.get('total_fortunes', 0) for data in all_data.values())
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        today = date.today().isoformat()
        users_today = sum(
            1 for data in all_data.values() 
            if data.get('last_fortune_date') == today
        )
        
        return {
            'total_users': total_users,
            'total_fortunes': total_fortunes,
            'users_today': users_today,
            'database_file': self.config.user_data_file
        }
    
    def reset_database(self) -> Dict[str, str]:
        """–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø)"""
        try:
            backup_file = self.db.reset_with_backup()
            logger.warning(f"üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞, –±—ç–∫–∞–ø: {backup_file}")
            return {
                'status': 'success',
                'backup_file': backup_file,
                'message': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞'
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}'
            }
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return self.config.admin_configured and user_id == self.config.admin_id
