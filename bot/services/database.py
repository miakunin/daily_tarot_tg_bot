# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (JSON —Ñ–∞–π–ª)
"""

import json
import os
import shutil
import logging
from datetime import datetime
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class Database:
    """–ü—Ä–æ—Å—Ç–∞—è JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, filename: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.filename = filename
        logger.info(f"üíæ Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {filename}")
    
    def load_all_data(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.filename):
                return {}
            
            with open(self.filename, 'r', encoding='utf-8') as f:
                return json.load(f)
                
        except json.JSONDecodeError:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {self.filename}")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def save_all_data(self, data: Dict[str, Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_user_data(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        all_data = self.load_all_data()
        return all_data.get(str(user_id))
    
    def save_user_data(self, user_id: int, user_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        all_data = self.load_all_data()
        all_data[str(user_id)] = user_data
        self.save_all_data(all_data)
    
    def delete_user(self, user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        all_data = self.load_all_data()
        user_key = str(user_id)
        
        if user_key in all_data:
            del all_data[user_key]
            self.save_all_data(all_data)
            logger.info(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
            return True
        
        return False
    
    def reset_with_backup(self) -> str:
        """–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞"""
        backup_filename = ""
        
        if os.path.exists(self.filename):
            # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_filename = f"users_data_backup_{timestamp}.json"
            shutil.copy(self.filename, backup_filename)
            
            # –£–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.remove(self.filename)
            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_filename}")
        
        return backup_filename
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.filename):
            return {
                'exists': False,
                'size': 0,
                'users_count': 0
            }
        
        try:
            # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(self.filename)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            data = self.load_all_data()
            users_count = len(data)
            
            return {
                'exists': True,
                'size': file_size,
                'users_count': users_count,
                'filename': self.filename
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'exists': True,
                'size': 0,
                'users_count': 0,
                'error': str(e)
            }
