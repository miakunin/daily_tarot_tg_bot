# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (/stats, /deck)
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes

from ..config import Config
from ..services.user_service import UserService
from ..data.tarot_cards import get_cards_by_type, get_total_cards

logger = logging.getLogger(__name__)

class StatsHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, config: Config, user_service: UserService):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.config = config
        self.user_service = user_service
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.user_service.get_user(user_id, update.effective_user.first_name)
            
            if user.total_fortunes == 0:
                stats_message = f"""
üìä {user_name}, –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞...

üîÆ –í—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –∫–∞—Ä—Ç.
‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fortune —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ!

üí´ –ü—É—Å—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –¢–∞—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è!
                """
            else:
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                can_get_today = user.can_get_fortune_today
                status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if can_get_today else "‚è≥ –ñ–¥–∏—Ç–µ –¥–æ –∑–∞–≤—Ç—Ä–∞"
                
                stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_name}:**

üîÆ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {user.total_fortunes}
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {user.last_fortune_date or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üéÇ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.created_at or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üåü –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {status}

‚ú® –ö–∞–∂–¥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–∞—Ä—Ç–∞–º –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –º—É–¥—Ä–æ—Å—Ç–∏!
                """
            
            await update.message.reply_text(stats_message, parse_mode='Markdown')
            logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def deck_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deck - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ"""
        try:
            card_stats = get_cards_by_type()
            
            deck_message = f"""
üÉè **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ –¢–∞—Ä–æ:**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç:**
üîÆ –°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã: {card_stats['major_arcana']} –∫–∞—Ä—Ç
‚öîÔ∏è –ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã: {card_stats['minor_arcana']} –∫–∞—Ä—Ç
üé¥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {card_stats['total']} –∫–∞—Ä—Ç

üåü **–ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã –≤–∫–ª—é—á–∞—é—Ç –≤—Å–µ —á–µ—Ç—ã—Ä–µ –º–∞—Å—Ç–∏:**
üíß –ö—É–±–∫–∏ (–í–æ–¥–∞) - —ç–º–æ—Ü–∏–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å
üåç –ü–µ–Ω—Ç–∞–∫–ª–∏ (–ó–µ–º–ª—è) - –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –º–∏—Ä, —Ñ–∏–Ω–∞–Ω—Å—ã, –∫–∞—Ä—å–µ—Ä–∞  
üí® –ú–µ—á–∏ (–í–æ–∑–¥—É—Ö) - –º—ã—Å–ª–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –æ–±—â–µ–Ω–∏–µ
üî• –ñ–µ–∑–ª—ã (–û–≥–æ–Ω—å) - –¥–µ–π—Å—Ç–≤–∏–µ, —ç–Ω–µ—Ä–≥–∏—è, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ

‚ú® –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–∑ –ø–æ–ª–Ω–æ–π –∫–æ–ª–æ–¥—ã!

üéØ **–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:**
üåô –û–¥–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –¥–µ–Ω—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
ü§ñ AI —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –æ—Ç Google Gemini (–ë–ï–°–ü–õ–ê–¢–ù–û!)
üìö Fallback –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
            """
            
            await update.message.reply_text(deck_message, parse_mode='Markdown')
            logger.info(f"üé¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–¥–µ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–æ–¥–µ.")
