# -*- coding: utf-8 -*-
"""
–ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (/reset, /adminstats)
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes

from ..config import Config
from ..services.user_service import UserService
from ..data.tarot_cards import get_total_cards

logger = logging.getLogger(__name__)

class AdminHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, config: Config, user_service: UserService):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.config = config
        self.user_service = user_service
    
    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not self.user_service.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            result = self.user_service.reset_database()
            
            if result['status'] == 'success':
                reset_message = f"""
üîß **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞!**

‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: `{result['backup_file']}`
üóëÔ∏è –ê–∫—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞
üîÑ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!
                """
            else:
                reset_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {result['message']}"
            
            await update.message.reply_text(reset_message, parse_mode='Markdown')
            logger.warning(f"üîß –ê–¥–º–∏–Ω {user_id} —Å–±—Ä–æ—Å–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î –∞–¥–º–∏–Ω–æ–º {user_id}: {e}")
    
    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adminstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not self.user_service.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.user_service.get_all_stats()
            config_status = self.config.get_status_info()
            
            stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['users_today']}
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {stats['total_fortunes']}

üé¥ **–ö–æ–Ω—Ç–µ–Ω—Ç:**
‚Ä¢ –ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {get_total_cards()}

ü§ñ **AI —Å–∏—Å—Ç–µ–º–∞:**
‚Ä¢ AI –¥–æ—Å—Ç—É–ø–Ω—ã: {"‚úÖ –î–∞" if config_status['ai_available'] else "‚ùå –ù–µ—Ç"}
‚Ä¢ AI –≤–∫–ª—é—á–µ–Ω—ã: {"‚úÖ –î–∞" if config_status['ai_enabled'] else "‚ùå –ù–µ—Ç"}

üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –§–∞–π–ª: `{stats['database_file']}`

‚öôÔ∏è **–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:**
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
/adminstats - —ç—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üëë –ê–¥–º–∏–Ω ID: {self.config.admin_id}
            """
            
            await update.message.reply_text(stats_message, parse_mode='Markdown')
            logger.info(f"üìä –ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id}: {e}")
